[
    {
        "filename": "minimal.c",
        "return_code": 0
    },
    {
        "filename": "nonzeroreturncode.c",
        "return_code": 69
    },
    {
        "filename": "addition.c",
        "return_code": 8
    },
    {
        "filename": "comments.c",
        "return_code": 0
    },
    {
        "filename": "negativeaddition.c",
        "return_code": 8
    },
    {
        "filename": "multiplication.c",
        "return_code": 12
    },
    {
        "filename": "addmultiply.c",
        "return_code": 10
    },
    {
        "filename": "multiplyadd.c",
        "return_code": 10
    },
    {
        "filename": "var_no_initialisation.c",
        "return_code": 69
    },
    {
        "filename": "var_addition.c",
        "return_code": 6
    },
    {
        "filename":"division.c",
        "return_code": 250
    },
    {
        "filename":"divisiontozero.c",
        "return_code": 0
    },
    {
        "filename":"divmulbidmas.c",
        "return_code": 9
    },
    {
        "filename":"divmulbidmas2.c",
        "return_code": 10
    },
    {
        "filename":"returninifstatement.c",
        "return_code": 1
    },
    {
        "filename":"branchifvariable.c",
        "return_code": 0
    },
    {
        "filename":"ifelse.c",
        "return_code": 0
    },
    {
        "filename":"initialisedecl.c",
        "return_code":69
    },
    {
        "filename":"multipledecl.c",
        "return_code":13
    },
    {
        "filename":"temperatureconversions.c",
        "return_code":68
    },
    {
        "filename":"subtraction.c",
        "return_code":60
    },
    {
        "filename":"ptrrefderef.c",
        "return_code":69
    },
    {
        "filename": "ptrinlined.c",
        "return_code":69
    },
    {
        "filename": "brackets.c",
        "return_code":20
    },
    {
        "filename":"pointerbidmas.c",
        "return_code":3
    },
    {
        "filename":"setpointer.c",
        "return_code":3
    },
    {
        "filename":"longlongintaddition.c",
        "return_code":6
    },
    {
        "filename":"pointeradd.c",
        "return_code":1
    },
    {
        "filename":"addpointer.c",
        "return_code":1
    },
    {
        "filename":"arrayindex.c",
        "return_code":2
    },
    {
        "filename":"equalsintpromotion.c",
        "return_code":0
    },
    {
        "filename":"functions.c",
        "return_code":69
    },
    {
        "filename":"ifdefpreprocessor.c",
        "return_code":69
    },
    {
        "filename":"ifndefpreprocessor.c",
        "return_code":69
    },
    {
        "filename":"ifdefelsepreprocessor.c",
        "return_code":69
    },
    {
        "filename":"nestedifdefpreprocessor.c",
        "return_code":69
    },
    {
        "filename": "undefpreprocessor.c",
        "return_code":69
    },
    {
        "filename": "definesubstitutenumber.c",
        "return_code":42
    },
    {
        "filename":"booleanandpreprocessor.c",
        "return_code":69
    },
    {
        "filename":"booleanorlhspreprocessor.c",
        "return_code":69
    },
    {
        "filename":"booleanorrhspreprocessor.c",
        "return_code":69
    },
    {
        "filename":"simplefunccall.c",
        "return_code":69
    },
    {
        "filename":"functionsumsix.c",
        "return_code":21
    },
    {
        "filename":"functionsumseven.c",
        "return_code":28
    },
    {
        "filename":"charoverflow.c",
        "return_code":1
    },
    {
        "filename":"helloworldstringliteral.c",
        "stdout": "hello world\n"
    },
    {
        "filename":"printarg.c",
        "args": ["hello world"],
        "stdout": "hello world\n"
    },
    {
        "filename":"printmyname.c",
        "args": ["Stu"],
        "stdout": "my name is:\nStu\n"
    },
    {
        "filename":"cmpgreaterthan.c",
        "return_code":0
    },
    {
        "filename":"cmplessthan.c",
        "return_code":0
    },
    {
        "filename":"pointercmp.c",
        "return_code":0
    },
    {
        "filename":"modulus.c",
        "return_code":1
    },
    {
        "filename":"emptyscope.c",
        "return_code":0
    },
    {
        "filename":"paramsandlocalvars.c",
        "return_code":11
    },
    {
        "filename":"elif.c",
        "return_code":0
    },
    {
        "filename":"multilinecomment.c",
        "return_code":0
    },
    {
        "filename":"inteq.c",
        "return_code":1
    },
    {
        "filename":"multiifstatement.c",
        "return_code":1
    },
    {
        "filename":"atoitest.c",
        "return_code":69
    },
    {
        "filename":"inlinescopetest.c",
        "return_code":1
    },
    {
        "filename":"comparisontypes.c",
        "return_code":1
    },
    {
        "filename":"loopcopy.c",
        "return_code":69
    },
    {
        "filename":"loopprint.c",
        "stdout":"looped\nlooped\n"
    },
    {
        "filename":"loopsum.c",
        "return_code":5
    },
    {
        "filename":"printfpercentd.c",
        "stdout":"score: 12",
        "return_code":9
    },
    {
        "filename":"printfalignmenttest.c",
        "stdout":"hello world"
    },
    {
        "filename":"negatevariable.c",
        "return_code":69
    },
    {
        "filename":"nestedif.c",
        "return_code":3
    },
    {
        "filename":"studentscore.c",
        "args":["stu", "50", "70", "50"],
        "stdout":"56\nstudent name: stu grade: D\n"
    },
    {
        "filename":"intinput.c",
        "stdin":"1\n1\n1\n",
        "stdout":"parsed text\nparsed text\nparsed text\n"
    },
    {
        "filename":"ifstack.c",
        "stdout":"hello\n"
    },
    {
        "filename":"fornoloop.c",
        "return_code":0
    },
    {
        "filename":"forstack.c",
        "stdout":"loop\nloop\nloop\n",
        "return_code":3
    },
    {
        "filename":"whilenoloop.c",
        "return_code":0
    },
    {
        "filename":"while.c",
        "return_code":5
    },
    {
        "filename":"whilestack.c",
        "stdout":"loop\nloop\nloop\n",
        "return_code":3
    },
    {
        "filename":"prefixincrement.c",
        "return_code":0
    },
    {
        "filename":"prefixincrementoverflow.c",
        "stdout":"0\n"
    },
    {
        "filename":"autoreturnzero.c",
        "return_code":0
    },
    {
        "filename":"enumdefinitionnotused.c",
        "return_code":0
    },
    {
        "filename":"uselesstypename.c",
        "return_code":0
    },
    {
        "filename":"paramusesreturnenum.c",
        "return_code":0
    },
    {
        "filename":"notequals.c",
        "return_code":0
    },
    {
        "filename":"functioninexpression.c",
        "return_code":0
    },
    {
        "filename":"functioninforloop.c",
        "return_code":0
    },
    {
        "filename":"functioninwhileloop.c",
        "return_code":0
    },
    {
        "filename":"arrayparam.c",
        "return_code":0
    },
    {
        "filename":"enumsubstitution.c",
        "return_code":0
    },
    {
        "filename":"castnegativetounsigned.c",
        "return_code":0
    },
    {
        "filename":"overflowingliteral.c",
        "stdout":"4294967295"
    },
    {
        "filename":"minimalglobalvar.c",
        "return_code":69
    },
    {
        "filename":"differenttypesglobalvariables.c",
        "stdout":"hell\n",
        "return_code":0
    },
    {
        "filename":"globalenum.c",
        "return_code":0
    },
    {
        "filename":"arrayindex2.c",
        "return_code":0
    },
    {
        "filename":"multidimensionalarray.c",
        "return_code":0
    },
    {
        "filename":"charliteral.c",
        "return_code":0
    },
    {
        "filename":"boolean.c",
        "return_code":0
    },
    {
        "filename":"booleanor.c",
        "return_code":0
    },
    {
        "filename":"booleanand.c",
        "return_code":0
    },
    {
        "filename":"recursive.c",
        "stdout":"aaaaaaa"
    },
    {
        "filename":"globalarithmetic.c",
        "return_code":0
    },
    {
        "filename":"unsignednoint.c",
        "return_code":0
    },
    {
        "filename":"shadowing.c",
        "return_code":0
    },
    {
        "filename":"ifwithoutscope.c",
        "return_code":0
    },
    {
        "filename":"whilewithoutscope.c",
        "stdout":"6,7,8,"
    },
    {
        "filename":"forwithoutscope.c",
        "stdout":"1,2,3,4,",
        "return_code":0
    },
    {
        "filename":"enuminlineusage.c",
        "return_code":0
    },
    {
        "filename":"structdefinitionnotused.c",
        "return_code":0
    },
    {
        "filename":"structvariable.c",
        "return_code":0
    },
    {
        "filename":"structscalarmembers.c",
        "return_code":0
    },
    {
        "filename":"structmemberaddress.c",
        "return_code":0
    },
    {
        "filename":"structinscope.c",
        "return_code":0
    },
    {
        "filename":"structdeclinscopes.c",
        "return_code":0
    },
    {
        "filename":"functioneightparams.c",
        "return_code":0
    }, 
    {
        "filename":"structandenum.c",
        "return_code":0
    },
    {
        "filename":"globalvariables.c",
        "return_code":0
    },
    {
        "filename":"forloopfunky.c",
        "stdout":"A1234B",
        "return_code":0
    },
    {
        "filename":"pluspluspointer.c",
        "return_code":0
    },
    {
        "filename":"dashdashpointer.c",
        "return_code":0
    },
    {
        "filename":"prefixdecrement.c",
        "return_code":0
    },
    {
        "filename":"prefixdecrementunderflow.c",
        "stdout":"255\n"
    },
    {
        "filename":"shiftleftright.c",
        "return_code":0
    },
    {
        "filename":"bitwiseor.c",
        "return_code":0
    }, 
    {
        "filename":"bitwiseand.c",
        "return_code":0
    },
    {
        "filename":"bitwisexor.c",
        "return_code":0
    },
    {
        "filename":"booleannot.c",
        "return_code":0
    },
    {
        "filename":"bitwisenot.c",
        "return_code":0
    },
    {
        "filename":"hexoctintegers.c",
        "return_code":0
    },
    {
        "filename":"casting.c",
        "return_code":0
    },
    {
        "filename":"anonymousenum.c",
        "return_code":0
    },
    {
        "filename":"simplearrinitialisation.c",
        "return_code":0
    },
    {
        "filename":"limitsdefines.c",
        "return_code":0
    },
    {
        "filename":"booltest.c",
        "return_code":0
    },
    {
        "filename":"globalvariablescomplex.c",
        "return_code":0
    },
    {
        "filename":"semicolonsintypedef.c",
        "return_code":0
    },
    {
        "filename":"postfixincrement.c",
        "return_code":0
    },
    {
        "filename":"postfixdecrement.c",
        "return_code":0
    },
    {
        "filename":"structshadowing.c",
        "return_code":0
    },
    {
        "filename":"sizeof.c",
        "return_code":0
    },
    {
        "filename":"unsigneddivide.c",
        "return_code":0
    },
    {
        "filename": "overlappingcommentstring.c",
        "return_code":0
    },
    {
        "filename": "elifpreprocess.c",
        "stdout": "Testing #elif preprocessor directive handling...\n\nTest 1 - Basic #elif: PASS: TEST1 == 2\nTest 2 - Multiple #elif: PASS\nTest 3 - Comments/whitespace: PASS\nTest 4 - Nested conditionals: PASS: INNER == 3\nTest 5 - Complex expressions: PASS: A * B == 15\nTest 6 - defined() operator: PASS: DEFINED_MACRO defined\nTest 8 - Logical operators: PASS: X < 15 && Y > 15\nTest 9 - ifdef/ifndef: PASS: elif 1\nTest 12 - Character constants: PASS: B\n",
        "return_code": 0
    },
    {
        "filename":"promotelast.c",
        "stdout":"p2.a=1, p2.b=2, p2.c=3\n"
    },
    {
        "filename":"floattest.c",
        "return_code":0
    },
    {
        "filename":"plusequals.c",
        "return_code":0
    },
    {
        "filename":"goto.c",
        "stdout":"",
        "return_code":0
    },
    {
        "filename":"subtractioncombination.c",
        "return_code":0
    },
    {
        "filename":"fileandlinemacros.c",
        "stdout":"fileandlinemacros.chello world.c",
        "return_code":0
    },
    {
        "filename":"simplefunctionmacro.c",
        "return_code":2
    },
    {
        "filename":"ternary.c",
        "return_code":0
    }
]
